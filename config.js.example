const config = {
  // The ID of the bot's owner (permission level 10 by default). Should never be anything other than the bot owner's ID.
  "ownerID": "123456789123456",

  // The IDs of bot administrators (permission level 9 by default); an array of user ID strings.
  "admins": [],

  // The IDs of bot support users (permission level 8 by default); an array of user ID strings
  "support": [],

  /*
   * Your bot's token (available on https://discordapp.com/developers/applications/me).
   * WARNING: NEVER, EVER PUT YOUR BOT'S TOKEN IN A PUBLIC REPOSITORY. If anyone gets a hold of
   * your token, they can take control of the bot and wreak havoc on any servers the bot is in!
   */
  "token": "mfa.VkO_2G4Qv3T--NO--lWetW_tjND--TOKEN--QFTm6YGtzq9PH--4U--tG0",

  /* 
   * Default per-server settings; new guilds will start with these values.  
   * DO NOT LEAVE ANY OF THESE BLANK, AS YOU WILL NOT BE ABLE TO UPDATE THEM
   * VIA COMMANDS IN THE GUILD.
   */
  "defaultSettings" : {
    "prefix": "-",
    "modLogChannel": "mod-log",
    "modRole": "Moderator",
    "adminRole": "Administrator",
    "systemNotice": "true", // This determines if the bot notifies users who try to run commands that they do not have permission for.
    "welcomeChannel": "welcome",
    "welcomeMessage": "Say hello to {{user}}, everyone! We all need a warm welcome sometimes :D",
    "welcomeEnabled": "false"
  },

  /* PERMISSION LEVEL DEFINITIONS */
  permLevels: [
    // The lowest permission level, given to non-roled users.
    { level: 0,
      name: "User",
      /*
       * We don't even need to bother checking this level, since every user has it, and therefore any
       * command usable by this level is usable by anyone.
       */
      check: () => true
    },

    // These are your permission levels; the staff (mod, admin, etc.) roles should always be above ordinary user roles.
    { level: 2,
      // This is the name of the role.
      name: "Moderator",
      /*
       * The following function checks the guild the message came from for a moderator role,
       * then checks if the member that authored the message has the role.
       * If they do, return true, which will allow them to execute the command in question.
       * If they don't, return false, which will prevent them from executing the command.
       */
      check: (message) => {
        try {
          const modRole = message.guild.roles.find(r => r.name.toLowerCase() === message.settings.modRole.toLowerCase());
          if (modRole && message.member.roles.has(modRole.id)) return true;
        } catch (e) {
          return false;
        }
      }
    },

    { level: 3,
      name: "Administrator", 
      check: (message) => {
        try {
          const adminRole = message.guild.roles.find(r => r.name.toLowerCase() === message.settings.adminRole.toLowerCase());
          return (adminRole && message.member.roles.has(adminRole.id));
        } catch (e) {
          return false;
        }
      }
    },
    
    // This level is for the server owner.
    { level: 4,
      name: "Server Owner",
       // A simple check that returns true if the guild owner's ID matches the message author's ID, and false otherwise.
      check: (message) => message.channel.type === "text" ? (message.guild.owner.user.id === message.author.id ? true : false) : false
    },

    /*
     * Bot Support is a special in-between level that gives users the equivalent of server owner access
     * to any server they join, so that they can help troubleshoot the bot on behalf of owners.
     */
    { level: 8,
      name: "Bot Support",
      /*
       * This check looks at whether the support array contains the user's ID. Yes, this means you
       * need to change this and reboot the bot to add a support user; make it better yourself!
       */
      check: (message) => config.support.includes(message.author.id)
    },

    // Bot Admins have some limited high-level access like rebooting the bot or reloading commands.
    { level: 9,
      name: "Bot Admin",
      check: (message) => config.admins.includes(message.author.id)
    },

    /*
     * This level is for the bot owner, and should be the highest permission level available.
     * The reason for this is because of dangerous commands such as eval or exec (if the owner has them).
     */
    { level: 10,
      name: "Bot Owner", 
      // Another simple check, compares the message author id to the one stored in the config file.
      check: (message) => message.client.config.ownerID === message.author.id
    }
  ]
};

module.exports = config;
